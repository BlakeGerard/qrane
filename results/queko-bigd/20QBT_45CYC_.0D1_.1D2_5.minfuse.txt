Parsing circuit

Processing circuit

Converting statements to qrane tuples ...  Done.
Constructing domains of one dimension ...  Done.
Attempting iterative merging of lower dimension domains to higher dimension domains ...  Done.
Pluto Minfuse chosen.
computing schedule ...Done.
Checking

Checking that all qops have been accounted for ... num_qops: 45, num_points: 45
True
Checking that recovered schedule respects dependences ... True
Checking that all qubits have the same number of accesses ... 0: { cx (8) }
4: { cx (13) }
5: { cx (7) }
6: { cx (8) }
7: { cx (4) }
8: { cx (11) }
10: { cx (4) }
12: { cx (13) }
13: { cx (1) }
14: { cx (2) }
15: { cx (14) }
18: { cx (4) }
19: { cx (1) }
Index expression count: 90
0: { cx (8) }
4: { cx (13) }
5: { cx (7) }
6: { cx (8) }
7: { cx (4) }
8: { cx (11) }
10: { cx (4) }
12: { cx (13) }
13: { cx (1) }
14: { cx (2) }
15: { cx (14) }
18: { cx (4) }
19: { cx (1) }
Index expression count: 90
True
Checking for isomorphism between original and recovered dependence graphs ... True
Domain := { S3[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S4[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S11[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S9[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S24[0]; S0[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S6[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S12[i0, 0] : 0 <= i0 <= 1; S20[i0, 0] : 0 <= i0 <= 1; S22[i0, 0] : 0 <= i0 <= 1; S5[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S18[i0, 0] : 0 <= i0 <= 1; S2[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, 0] : 0 <= i0 <= 1; S10[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S16[i0, 0] : 0 <= i0 <= 1; S7[i0] : 0 <= i0 <= 1; S1[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0 }

Read := { S12[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S12[i0, i1 = 0] -> q[6 + 4i0] : 0 <= i0 <= 1; S5[i0, i1] -> q[18 - 6i0 - 14i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S5[i0, i1] -> q[14 - 6i0 + i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S18[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S18[i0, i1 = 0] -> q[10 - 6i0] : 0 <= i0 <= 1; S20[i0, i1 = 0] -> q[15 - 9i0] : 0 <= i0 <= 1; S20[i0, i1 = 0] -> q[6 - 2i0] : 0 <= i0 <= 1; S4[i0, i1] -> q[14 - 10i0 - 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S4[i0, i1] -> q[5 + 10i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S22[i0, i1 = 0] -> q[7 - 7i0] : 0 <= i0 <= 1; S22[i0, i1 = 0] -> q[4] : 0 <= i0 <= 1; S24[i0 = 0] -> q[12]; S24[i0 = 0] -> q[0]; S11[i0, i1] -> q[15 - 15i0 + 5i1] : i0 <= 1 and 0 <= i1 <= i0; S11[i0, i1] -> q[6 + 2i0] : i0 <= 1 and 0 <= i1 <= i0; S3[i0, i1] -> q[8 + 10i0 - 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S3[i0, i1] -> q[5 + 7i0 + i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S7[i0] -> q[12 - 8i0] : 0 <= i0 <= 1; S7[i0] -> q[5 + i0] : 0 <= i0 <= 1; S9[i0, i1] -> q[15 - 15i0 + 13i1] : i0 <= 1 and 0 <= i1 <= i0; S9[i0, i1] -> q[4 + 4i0] : i0 <= 1 and 0 <= i1 <= i0; S1[i0, i1] -> q[7 + 5i0 + 5i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S1[i0, i1] -> q[4 - 4i0 + 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S10[i0, i1] -> q[15 - 15i0 + 5i1] : i0 <= 1 and 0 <= i1 <= i0; S10[i0, i1] -> q[6 + 6i0 - 4i1] : i0 <= 1 and 0 <= i1 <= i0; S14[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S14[i0, i1 = 0] -> q[10 - 4i0] : 0 <= i0 <= 1; S6[i0, i1] -> q[4 + 4i0 + 15i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S6[i0, i1] -> q[12i0 + 5i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S2[i0, i1] -> q[7 + 11i0 + 5i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S2[i0, i1] -> q[4 + 8i0 + 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] -> q[12 + 6i0 - 12i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] -> q[5 + 7i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S16[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S16[i0, i1 = 0] -> q[4 + 6i0] : 0 <= i0 <= 1 }

Write := { S12[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S5[i0, i1] -> q[14 - 6i0 + i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S18[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S20[i0, i1 = 0] -> q[15 - 9i0] : 0 <= i0 <= 1; S4[i0, i1] -> q[5 + 10i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S22[i0, i1 = 0] -> q[4] : 0 <= i0 <= 1; S24[i0 = 0] -> q[0]; S11[i0, i1] -> q[15 - 15i0 + 5i1] : i0 <= 1 and 0 <= i1 <= i0; S3[i0, i1] -> q[5 + 7i0 + i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S7[i0] -> q[5 + i0] : 0 <= i0 <= 1; S9[i0, i1] -> q[15 - 15i0 + 13i1] : i0 <= 1 and 0 <= i1 <= i0; S1[i0, i1] -> q[4 - 4i0 + 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S10[i0, i1] -> q[15 - 15i0 + 5i1] : i0 <= 1 and 0 <= i1 <= i0; S14[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1; S6[i0, i1] -> q[4 + 4i0 + 15i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S2[i0, i1] -> q[4 + 8i0 + 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] -> q[5 + 7i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S16[i0, i1 = 0] -> q[15] : 0 <= i0 <= 1 }

Call := { S5[i0, i1] -> [18 - 6i0 - 14i1, 14 - 6i0 + i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] -> [12 + 6i0 - 12i1, 5 + 7i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S3[i0, i1] -> [8 + 10i0 - 4i1, 5 + 7i0 + i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S6[i0, i1] -> [12i0 + 5i1, 4 + 4i0 + 15i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S22[i0, i1 = 0] -> [7 - 7i0, 4] : 0 <= i0 <= 1; S1[i0, i1] -> [7 + 5i0 + 5i1, 4 - 4i0 + 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, i1 = 0] -> [10 - 4i0, 15] : 0 <= i0 <= 1; S24[i0 = 0] -> [12, 0]; S4[i0, i1] -> [14 - 10i0 - 2i1, 5 + 10i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S16[i0, i1 = 0] -> [4 + 6i0, 15] : 0 <= i0 <= 1; S20[i0, i1 = 0] -> [6 - 2i0, 15 - 9i0] : 0 <= i0 <= 1; S10[i0, i1] -> [6 + 6i0 - 4i1, 15 - 15i0 + 5i1] : i0 <= 1 and 0 <= i1 <= i0; S7[i0] -> [12 - 8i0, 5 + i0] : 0 <= i0 <= 1; S12[i0, i1 = 0] -> [6 + 4i0, 15] : 0 <= i0 <= 1; S9[i0, i1] -> [4 + 4i0, 15 - 15i0 + 13i1] : i0 <= 1 and 0 <= i1 <= i0; S2[i0, i1] -> [7 + 11i0 + 5i1, 4 + 8i0 + 4i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S18[i0, i1 = 0] -> [10 - 6i0, 15] : 0 <= i0 <= 1; S11[i0, i1] -> [6 + 2i0, 15 - 15i0 + 5i1] : i0 <= 1 and 0 <= i1 <= i0 }

DataDependencies := { S2[0, 1] -> S0[1, 0]; S0[0, 1] -> S1[0, 0]; S11[0, 0] -> S12[0, 0]; S14[1, 0] -> S16[0, 0]; S20[1, 0] -> S22[0, 0]; S18[0, 0] -> S18[1, 0]; S2[i0, i1] -> S3[i0, 1 - i0 - i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S6[1, 0] -> S11[1, o1] : 0 <= o1 <= 1; S6[0, i1] -> S7[1 - i1] : 0 <= i1 <= 1; S7[i0] -> S10[1 - i0, 1 - i0] : 0 <= i0 <= 1; S6[i0, 0] -> S9[i0, o1] : i0 <= 1 and 0 <= o1 <= i0; S24[0] -> S0[1, 0]; S4[0, 0] -> S6[0, 1]; S10[i0, i1] -> S11[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S18[1, 0] -> S22[0, 0]; S4[0, 0] -> S7[0]; S3[i0, 1 - i0] -> S6[i0, 0] : 0 <= i0 <= 1; S7[1] -> S11[0, 0]; S9[i0, 0] -> S10[i0, 0] : 0 <= i0 <= 1; S14[0, 0] -> S14[1, 0]; S2[0, 0] -> S5[0, 1]; S6[0, 0] -> S16[0, 0]; S3[0, 1] -> S7[1]; S6[0, 0] -> S18[1, 0]; S1[1, 0] -> S9[1, 0]; S3[0, 0] -> S4[0, o1] : 0 <= o1 <= 1; S4[0, 1] -> S0[1, 0]; S12[1, 0] -> S14[0, 0]; S7[0] -> S0[1, 0]; S12[0, 0] -> S20[1, 0]; S5[i0, 1 - i0] -> S6[i0, 0] : 0 <= i0 <= 1; S7[1] -> S14[1, 0]; S0[0, 0] -> S3[0, 0]; S4[1, 0] -> S22[0, 0]; S1[0, i1] -> S2[0, i1] : 0 <= i1 <= 1; S2[0, 1] -> S4[0, 1]; S3[1, 0] -> S5[1, 0]; S5[0, 1] -> S4[1, 0]; S0[0, 0] -> S0[1, 0]; S6[0, 0] -> S4[1, 0]; S6[1, 0] -> S10[1, 1]; S9[0, 0] -> S22[0, 0]; S16[0, 0] -> S16[1, 0]; S0[0, 1] -> S22[0, 0]; S0[i0, 1 - i0] -> S2[i0, 0] : 0 <= i0 <= 1; S22[0, 0] -> S22[1, 0]; S6[0, 0] -> S22[0, 0]; S20[0, 0] -> S20[1, 0]; S10[0, 0] -> S20[1, 0]; S11[0, 0] -> S20[1, 0]; S0[0, 1] -> S24[0]; S2[0, 0] -> S6[0, 0]; S3[1, 0] -> S10[1, 0]; S24[0] -> S1[1, 0]; S16[0, 0] -> S22[0, 0]; S7[1] -> S20[o0, 0] : 0 <= o0 <= 1; S7[1] -> S12[0, 0]; S18[1, 0] -> S20[0, 0]; S7[1] -> S22[0, 0]; S6[0, 0] -> S20[1, 0]; S14[1, 0] -> S20[1, 0]; S1[i0, 1 - i0] -> S0[1, 0] : 0 <= i0 <= 1; S4[0, i1] -> S5[i1, 0] : 0 <= i1 <= 1; S16[1, 0] -> S18[0, 0]; S12[0, 0] -> S12[1, 0]; S6[0, 0] -> S24[0]; S4[1, 0] -> S9[0, 0]; S22[1, 0] -> S24[0] }

RecoveredSchedule := { S16[i0, 0] -> [1, 0, 2 + i0, 1, 11 - 12i0, 1] : 0 <= i0 <= 1; S1[i0, i1] -> [i0, 0, 6, 1 - i1, 2 - i0, 0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S4[i0, i1] -> [i0, 0, 6 - 6i0, 1 + i1, 5, 13] : i0 >= 0 and 0 <= i1 <= 1 - i0; S20[i0, 0] -> [1, 0, 4 + i0, 1, 0, 7] : 0 <= i0 <= 1; S22[i0, 0] -> [1, 0, 5 + i0, 1, 1 - 2i0, 6] : 0 <= i0 <= 1; S5[i0, i1] -> [i0, 1, i1, 0, 0, 0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S12[i0, 0] -> [1, 0, i0, 1, 9, 8] : 0 <= i0 <= 1; S10[i0, i1] -> [1 + i0, 0, 0, 1 + i1, 7, 2] : i0 <= 1 and 0 <= i1 <= i0; S24[0] -> [1, 0, 6, 1, 0, 10]; S6[i0, i1] -> [i0, 2, i1, 0, 0, 0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, 0] -> [1, 0, 1 + i0, 1, 10, 3] : 0 <= i0 <= 1; S7[i0] -> [0, 3, i0, 0, 0, 0] : 0 <= i0 <= 1; S2[i0, i1] -> [i0, 0, 6, 1 - i1, 3, 4] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] -> [i0, 0, 6, i0 + i1, 1 + i0, 9] : i0 >= 0 and 0 <= i1 <= 1 - i0; S3[i0, i1] -> [i0, 0, 6, 1 + i1, 4, 14] : i0 >= 0 and 0 <= i1 <= 1 - i0; S18[i0, 0] -> [1, 0, 3 + i0, 1, -i0, 5] : 0 <= i0 <= 1; S9[i0, i1] -> [1 + i0, 0, 0, 1 + i1, 6, 11] : i0 <= 1 and 0 <= i1 <= i0; S11[i0, i1] -> [1 + i0, 0, 0, 1 + i1, 8, 12] : i0 <= 1 and 0 <= i1 <= i0 }

--- Stats ---
Qops: 45
Lookahead Breadth Limit: 2
Search Limit: 0
Domains: 
1D: 2 domains, 3 points.
2D: 16 domains, 42 points.
Total: 18 domains, 45 points.
-------------
--- Substr ---
Num substr             : 0
Max substr size        : 0
Avg substr size        : 0
Avg substr occurrences : 0
--------------
--- Domain Size Breakdown ---
Domain Size : Domain Count
1 : 1
2 : 7
3 : 10
-----------------------------
--- Reconstruction Profile ---
Dimension -> {Cardinality:Count}
1 -> {1:1,2:1,}
2 -> {2:6,3:10,}
------------------------------
--- Timing ---
Reconstruction: 113ms
Scheduling: 159ms
Verification: 2405ms
Total execution time: 2677ms
-------------
