Parsing circuit

Processing circuit

Converting statements to qrane tuples ...  Done.
Constructing domains of one dimension ...  Done.
Attempting iterative merging of lower dimension domains to higher dimension domains ...  Done.
Pluto Minfuse chosen.
computing schedule ...Done.
Checking

Checking that all qops have been accounted for ... num_qops: 45, num_points: 45
True
Checking that recovered schedule respects dependences ... True
Checking that all qubits have the same number of accesses ... 1: { cx (15) }
2: { cx (11) }
3: { cx (2) }
4: { cx (11) }
6: { cx (2) }
7: { cx (3) }
9: { cx (3) }
10: { cx (1) }
11: { cx (8) }
12: { cx (5) }
13: { cx (6) }
15: { cx (17) }
16: { cx (1) }
17: { cx (3) }
18: { cx (2) }
Index expression count: 90
1: { cx (15) }
2: { cx (11) }
3: { cx (2) }
4: { cx (11) }
6: { cx (2) }
7: { cx (3) }
9: { cx (3) }
10: { cx (1) }
11: { cx (8) }
12: { cx (5) }
13: { cx (6) }
15: { cx (17) }
16: { cx (1) }
17: { cx (3) }
18: { cx (2) }
Index expression count: 90
True
Checking for isomorphism between original and recovered dependence graphs ... True
Domain := { S3[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S17[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S12[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S13[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S11[i0, i1, i2] : i0 >= 0 and 0 <= i1 <= 1 and 0 <= i2 <= 1 - i0; S30[0]; S2[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S8[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S10[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S16[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S1[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S9[i0, i1, i2] : i0 >= 0 and i1 >= 0 and 0 <= i2 <= 1 - i0 and i2 <= 1 - i1 }

Read := { S0[i0, i1] -> q[12 - i0] : i0 <= 1 and 0 <= i1 <= i0; S0[i0, i1] -> q[7 + 5i0 + i1] : i0 <= 1 and 0 <= i1 <= i0; S12[i0, i1] -> q[15 - 11i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S12[i0, i1] -> q[1 + 14i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S30[i0 = 0] -> q[15]; S30[i0 = 0] -> q[1]; S11[i0, i1, i2] -> q[2 - i0 + 2i2] : i0 >= 0 and 0 <= i1 <= 1 and 0 <= i2 <= 1 - i0; S11[i0, i1, i2] -> q[1 + 5i0 + 14i2] : i0 >= 0 and 0 <= i1 <= 1 and 0 <= i2 <= 1 - i0; S8[i0, i1] -> q[13 + 2i0 - 11i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S8[i0, i1] -> q[7 - 3i0 + 5i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S17[i0, i1] -> q[15 - 14i0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S17[i0, i1] -> q[2 + 13i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S3[i0, i1] -> q[11 + 2i0 + 4i1] : i0 <= 1 and 0 <= i1 <= i0; S3[i0, i1] -> q[2 + 7i0 + 2i1] : i0 <= 1 and 0 <= i1 <= i0; S13[i0, i1] -> q[4 + 14i0 + 13i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S13[i0, i1] -> q[1 + 3i0 + 9i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S1[i0, i1] -> q[12 + i1] : i0 <= 1 and 0 <= i1 <= i0; S1[i0, i1] -> q[11 - 9i0 + 7i1] : i0 <= 1 and 0 <= i1 <= i0; S10[i0, i1] -> q[13 + 2i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S10[i0, i1] -> q[11 - 10i0 - 10i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, i1] -> q[4 + 13i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, i1] -> q[1 + i0 + 10i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S9[i0, i1, i2] -> q[15 - 14i0 - 2i2] : i0 >= 0 and i1 >= 0 and 0 <= i2 <= 1 - i0 and i2 <= 1 - i1; S9[i0, i1, i2] -> q[2 + 13i0 + 5i2] : i0 >= 0 and i1 >= 0 and 0 <= i2 <= 1 - i0 and i2 <= 1 - i1; S2[i0, i1] -> q[11 - 9i0 + 7i1] : i0 <= 1 and 0 <= i1 <= i0; S2[i0, i1] -> q[3 + 13i1] : i0 <= 1 and 0 <= i1 <= i0; S16[i0, i1] -> q[4 + 11i0 + 11i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S16[i0, i1] -> q[2 - i0 - i1] : i0 >= 0 and 0 <= i1 <= 1 - i0 }

Write := { S0[i0, i1] -> q[7 + 5i0 + i1] : i0 <= 1 and 0 <= i1 <= i0; S12[i0, i1] -> q[15 - 11i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S30[i0 = 0] -> q[15]; S11[i0, i1, i2] -> q[2 - i0 + 2i2] : i0 >= 0 and 0 <= i1 <= 1 and 0 <= i2 <= 1 - i0; S8[i0, i1] -> q[7 - 3i0 + 5i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S17[i0, i1] -> q[2 + 13i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S3[i0, i1] -> q[11 + 2i0 + 4i1] : i0 <= 1 and 0 <= i1 <= i0; S13[i0, i1] -> q[4 + 14i0 + 13i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S1[i0, i1] -> q[12 + i1] : i0 <= 1 and 0 <= i1 <= i0; S10[i0, i1] -> q[13 + 2i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, i1] -> q[4 + 13i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S9[i0, i1, i2] -> q[2 + 13i0 + 5i2] : i0 >= 0 and i1 >= 0 and 0 <= i2 <= 1 - i0 and i2 <= 1 - i1; S2[i0, i1] -> q[11 - 9i0 + 7i1] : i0 <= 1 and 0 <= i1 <= i0; S16[i0, i1] -> q[4 + 11i0 + 11i1] : i0 >= 0 and 0 <= i1 <= 1 - i0 }

Call := { S0[i0, i1] -> [12 - i0, 7 + 5i0 + i1] : i0 <= 1 and 0 <= i1 <= i0; S3[i0, i1] -> [2 + 7i0 + 2i1, 11 + 2i0 + 4i1] : i0 <= 1 and 0 <= i1 <= i0; S9[i0, i1, i2] -> [15 - 14i0 - 2i2, 2 + 13i0 + 5i2] : i0 >= 0 and i1 >= 0 and 0 <= i2 <= 1 - i0 and i2 <= 1 - i1; S8[i0, i1] -> [13 + 2i0 - 11i1, 7 - 3i0 + 5i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S1[i0, i1] -> [11 - 9i0 + 7i1, 12 + i1] : i0 <= 1 and 0 <= i1 <= i0; S14[i0, i1] -> [1 + i0 + 10i1, 4 + 13i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S16[i0, i1] -> [2 - i0 - i1, 4 + 11i0 + 11i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S13[i0, i1] -> [1 + 3i0 + 9i1, 4 + 14i0 + 13i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S10[i0, i1] -> [11 - 10i0 - 10i1, 13 + 2i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S11[i0, i1, i2] -> [1 + 5i0 + 14i2, 2 - i0 + 2i2] : i0 >= 0 and 0 <= i1 <= 1 and 0 <= i2 <= 1 - i0; S12[i0, i1] -> [1 + 14i0 + 3i1, 15 - 11i0 + 3i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S30[i0 = 0] -> [1, 15]; S2[i0, i1] -> [3 + 13i1, 11 - 9i0 + 7i1] : i0 <= 1 and 0 <= i1 <= i0; S17[i0, i1] -> [15 - 14i0, 2 + 13i0 + 2i1] : i0 >= 0 and 0 <= i1 <= 1 - i0 }

DataDependencies := { S11[i0, i1, 0] -> S11[1, i0, 0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, 0] -> S11[1 - i0, i0, o2] : i0 <= 1 and 0 <= o2 <= i0; S13[i0, i1] -> S14[i0, i1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S0[i0, i1] -> S1[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S12[i0, 1 - i0] -> S13[o0, 0] : i0 >= 0 and i0 <= o0 <= 1; S8[0, 0] -> S10[0, 0]; S10[i0, 1 - i0] -> S12[i0, 0] : 0 <= i0 <= 1; S3[0, 0] -> S3[1, 1]; S1[1, 0] -> S8[0, 1]; S17[i0, 0] -> S9[i0, 1 - i0, 0] : 0 <= i0 <= 1; S17[0, 1] -> S12[1, 0]; S2[i0, i0] -> S3[i0, 0] : 0 <= i0 <= 1; S1[1, 1] -> S3[1, 0]; S11[0, 0, 1] -> S13[0, 0]; S11[1, 1, 0] -> S30[0]; S11[0, 0, 1] -> S12[0, o1] : 0 <= o1 <= 1; S9[0, 1, 0] -> S14[1, 0]; S16[0, 1] -> S9[0, 1, 0]; S3[1, 0] -> S9[0, 0, 1]; S3[1, 1] -> S13[0, 1]; S9[1, 1, 0] -> S30[0]; S11[0, 0, 0] -> S17[0, 0]; S9[i0, i1, 0] -> S11[i0, o1, 0] : o1 >= 0 and -i0 + i1 <= o1 <= 1 - i0 and o1 <= i1; S12[1, 0] -> S14[1, 0]; S3[0, 0] -> S0[1, o1] : 0 <= o1 <= 1; S17[1, 0] -> S11[1, 0, 0]; S10[i0, 1 - i0] -> S11[o0, o1, 1 - o0] : o1 >= i0 - o0 and 0 <= o1 <= 1 - o0 and o1 <= i0; S11[0, i1, i1] -> S16[i1, 0] : 0 <= i1 <= 1; S1[i0, i1] -> S2[i0, i1] : i0 <= 1 and 0 <= i1 <= i0; S8[1, 0] -> S16[0, o1] : 0 <= o1 <= 1; S12[0, 0] -> S11[1, 0, 0]; S3[0, 0] -> S2[1, 0]; S9[0, i1, i2] -> S10[i1, 1 - i1 - i2] : i1 >= 0 and 0 <= i2 <= 1 - i1; S16[0, 1] -> S10[1, 0]; S10[1, 0] -> S16[1, 0]; S9[1, 0, 0] -> S9[1, 1, 0]; S0[0, 0] -> S8[0, 0]; S3[i0, 0] -> S10[0, 0] : 0 <= i0 <= 1; S16[i0, 1 - i0] -> S11[1, 0, 0] : 0 <= i0 <= 1; S2[1, 0] -> S8[0, 1]; S3[0, 0] -> S14[0, 1]; S12[0, 0] -> S8[1, 0]; S3[1, 0] -> S8[0, 0]; S1[0, 0] -> S0[1, 0]; S2[1, 0] -> S9[0, 0, 0]; S13[0, 0] -> S11[1, 0, 0]; S14[0, 0] -> S8[1, 0]; S17[0, i1] -> S10[1, 0] : 0 <= i1 <= 1; S16[i0, i1] -> S17[i0, o1] : i0 >= 0 and 0 <= i1 <= 1 - i0 and 0 <= o1 <= 1 - i0; S12[i0, 0] -> S16[i0, 1 - i0] : 0 <= i0 <= 1; S8[0, i1] -> S9[0, 0, 1 - i1] : 0 <= i1 <= 1 }

RecoveredSchedule := { S13[i0, i1] -> [1, 0, 1 + i0, 0, i1, 0, 5] : i0 >= 0 and 0 <= i1 <= 1 - i0; S12[i0, i1] -> [1, 0, 1 + i0, 0, -i1, -i0 + i1, 7] : i0 >= 0 and 0 <= i1 <= 1 - i0; S1[i0, i1] -> [0, i0, i1, 1, 0, 0, 0] : i0 <= 1 and 0 <= i1 <= i0; S30[0] -> [2, 0, 0, 0, 0, 0, 0]; S8[i0, i1] -> [1, 0, i0, 0, i1, 1, 0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S17[i0, i1] -> [1, 0, 1 + i0, 0, 1 + i1, 1, 1] : i0 >= 0 and 0 <= i1 <= 1 - i0; S9[i0, i1, i2] -> [1, i0, i1, 0, 1 - i0 + i2, 1 - i0, 2] : i0 >= 0 and i1 >= 0 and 0 <= i2 <= 1 - i0 and i2 <= 1 - i1; S10[i0, i1] -> [1, 0, i0, 1, i1, 0, 0] : i0 >= 0 and 0 <= i1 <= 1 - i0; S14[i0, i1] -> [1, 0, 1 + i0, 0, i1, 0, 6] : i0 >= 0 and 0 <= i1 <= 1 - i0; S11[i0, i1, i2] -> [1, i0, 1 + i1, 0, i1 - i2, 1, 3] : i0 >= 0 and 0 <= i1 <= 1 and 0 <= i2 <= 1 - i0; S0[i0, i1] -> [0, i0, i1, 0, 0, 0, 0] : i0 <= 1 and 0 <= i1 <= i0; S2[i0, i1] -> [0, i0, i1, 2, 0, 0, 0] : i0 <= 1 and 0 <= i1 <= i0; S3[i0, i1] -> [0, i0, i0 + i1, 3, 0, 0, 0] : i0 <= 1 and 0 <= i1 <= i0; S16[i0, i1] -> [1, 0, 1 + i0, 0, i1, 1 - i1, 4] : i0 >= 0 and 0 <= i1 <= 1 - i0 }

--- Stats ---
Qops: 45
Lookahead Breadth Limit: 2
Search Limit: 0
Domains: 
1D: 1 domains, 1 points.
2D: 11 domains, 33 points.
3D: 2 domains, 11 points.
Total: 14 domains, 45 points.
-------------
--- Substr ---
Num substr             : 0
Max substr size        : 0
Avg substr size        : 0
Avg substr occurrences : 0
--------------
--- Domain Size Breakdown ---
Domain Size : Domain Count
1 : 1
3 : 11
5 : 1
6 : 1
-----------------------------
--- Reconstruction Profile ---
Dimension -> {Cardinality:Count}
1 -> {1:1,}
2 -> {3:11,}
3 -> {5:1,6:1,}
------------------------------
--- Timing ---
Reconstruction: 135ms
Scheduling: 120ms
Verification: 3234ms
Total execution time: 3515ms
-------------
